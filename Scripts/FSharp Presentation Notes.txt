FSharp Presentation Notes
Slide 3: How did I get here?
    - It's all about context
    - A lot of the tools we're already using are heavily influenced by functional concepts, so let's go to the source.
Slide 10: Hello world
    - ctrl + F5
    - Line 4: open keyword is like "using"
    - Line 6: this is how an attribute is declared. In this case it indicates this is where to enter the application
    - Line 7: main "method" definition
    - Lines 8-11: 4 different ways to say hello
Slide 11:
    - In Visual Studio
        View -> Other Windows -> F# Interactive
        Or Ctrl + Alt + F
    - FSI: windows + r/ cmd
    - fsi
    - let x = "hello world";; // It's just a value
    - let sayHello () = printfn "%s" "Hello world"
    - sayHello ();;
Slide 12: Immutable by Default
    - let x = "hello world"
    - x = "goodbye world";; // Compares the value of x to "goodbye world" which evaluates to false

    - let mutable x = "hello world"
    - x = "goodbye world"
    - x <- "goodbye world"
Slide 13
    - 
    - Binding order - Move order of bindings in Module1 to show compiler errors
    - File order - Move order of Module1 so that Program.fs is before Module1
    - Show how changing indentations causes compiler errors
    - Mouse over function to show expected inputs/outputs
    - Add type annotations to one of the functions
Slide 12
    - Get back into FSI
    - Clear it out
    - let add a b = a + b
    - let add' = add 
    - let add1 = add 1
    - add1 5 // should get 6
    - Look at the functions saySomethingShort and sayHelloTo
    - Execute saySomethingShort in FSI with only one parameter
    	- It returns a function that expects a string and returns a string
    	
Slide 15
    - Type annotation time
    - Reset FSI
    - let add a b = a + b
    - add "is this " "what you meant?"
    - add 1 2 // should throw a type exception
    - reset FSI
    - let add (a : int) (b : int) : int = a + b//
Slide 16
    - Open up module 2
    - Talk about Car
        - The "x" is like the F# "this" operator. It can be anything, but it needs to be consistent
        - 3 implicit readonly properties were created from this class definition
        - You cannot set these properties after initialization
        - Note that you do not need the "new" keyword, although it is supported
        - "new" is only used when initializing classes that implement IDisposable (as a way to signify that they implement it) 
    - Talk about Phone
        - automatic property for OperatingSystem
        - Backed by "os" constructor parameter
        - Print phone prints the OS off of OperatingSystem
            - When I used os off of the constructor, it didn't udpate after updating OperatingSystem...
